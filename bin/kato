#!/usr/bin/env node

var async = require('async'),
    fs = require('fs'),
    path = require('path'),
    flatiron = require('flatiron'),
    app = flatiron.app,
    atomify = require('../lib/atomify.js'),
    cleanup = require('../lib/cleanup.js'),
    config = require('../lib/config.js'),
    kutil = require('../lib/kutil.js'),
    queue = require('../lib/queue.js');

app.use(flatiron.plugins.cli, {
  argv: {
    atomify: {
      boolean: true,
      description: 'Atomify mode. Pass in existing mp4 files to have\n               their metadata refreshed and persisted.'
    },
    cleanup: {
      boolean: true,
      description: 'Cleanup mode. Remove source files and move outfiles to iTunes.'
    },
    config: {
      boolean: true,
      description: 'Config mode. Set environment defaults and preferences.'
    },
    overwrite: {
      boolean: true,
      description: 'Overwrite mode. Process files even if an existing outfile\n               already exists. Overwrite existing outfile.'
    }
  },
  usage: 'kato: Swiss army knife for converting video files to iTunes-friendly format'
});

app.use(require('flatiron-cli-config'), {
  store: file
});

if( argv.config || config.required() ) {
  config.run();
} else if (argv.cleanup) {
  cleanup.run(argv._);
} else {
  for (var i in argv._) {
    if (argv.atomify) {
      queue.atomify(argv._[i]);
    } else {
      queue.transcode(argv._[i]);
    }
  }
}
